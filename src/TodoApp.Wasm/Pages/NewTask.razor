@page "/todo/new"
@using TodoApp.Model.Dto
@using TodoApp.Model.Dto.User
@using TodoApp.Model.Enums
@using TodoApp.Wasm.Services

@inject IToastService toastService
@inject NavigationManager NavManager

<h3>Add new task</h3>

<EditForm Model="newTask" OnValidSubmit="AddNewTask">
    <DataAnnotationsValidator/>
    @* <ValidationSummary/> *@
    <div class="mb-3">
        <label for="taskTitle" class="form-label">Title</label>
        <InputText @bind-Value="newTask.Title" class="form-control" id="taskTitle" aria-describedby="taskTitleHelp"></InputText>
        <ValidationMessage For="() => newTask.Title"/>
    </div>

    <div class="mb-3">
        <label for="taskDescription" class="form-label">Description</label>
        <InputText @bind-Value="newTask.Description" class="form-control" id="taskDescription" aria-describedby="taskDescriptionHelp"></InputText>
        <ValidationMessage For="() => newTask.Description"/>
    </div>

    <div class="mb-3">
        <label for="taskPriority" class="form-label">Priority</label>
        <InputSelect @bind-Value="newTask.Priority" class="form-control" id="taskPriority" aria-describedby="taskPriorityHelp">
            <option>Select a priority</option>
            @foreach (var priority in Enum.GetNames(typeof(Priority)))
            {
                <option value="@priority">@priority</option>
            }
        </InputSelect>
        <ValidationMessage For="() => newTask.Priority"/>
    </div>

    <div class="mb-3">
        <label for="taskAssignee" class="form-label">Assignee</label>
        <InputSelect @bind-Value="newTask.AssigneeId" class="form-control" id="taskAssignee" aria-describedby="taskAssigneeHelp">
            <option>Select an assignee</option>
            @foreach (var assignee in assignees)
            {
                <option value="@assignee.Id">@assignee.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="() => newTask.AssigneeId"/>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>


@code {
    private NewTaskDto newTask = new();

    private List<AssigneeDto> assignees = new();

    [Inject]
    private IUserApiService userApiService { get; set; }

    [Inject]
    public ITaskApiServices taskApiServices { get; set; }

    protected override async Task OnInitializedAsync()
    {
        assignees = await userApiService.GetAssigneesAsync();
    }

    private async Task AddNewTask()
    {
        var result = await taskApiServices.CreateTaskAsync(newTask);
        if (result.Id != Guid.Empty)
        {
            toastService.ShowSuccess("Task created successfully", settings =>
            {
                settings.ShowProgressBar = true;
                settings.PauseProgressOnHover = true;
            });
            NavManager.NavigateTo("/todo");
        }
        else
        {
            toastService.ShowError("Something went wrong");
        }
    }

}